
@using System.Linq
@using CleanTechSim.MainPage.Models
@model DynamicGraphModel

@{  
    string divElementId = Model.GraphId;
    string canvasElementId = Model.GraphId + "Canvas";
    string medianInputElementId = Model.GraphId + "MedianInput";
    string dispersionInputElementId = Model.GraphId + "DispersionInput";
    string skewInputElementId = Model.GraphId + "SkewInput";
}

<div id="@divElementId" class="graph">

    @if (!string.IsNullOrWhiteSpace(Model.Title)) {
        <div>
            <span class="line-graph-title">@Model.Title</span>-<span class="line-graph-subtitle">@Model.SubTitle</span>
        </div>
    }
    
    <canvas id="@canvasElementId"></canvas>

    <div class="dynamic-graph-inputs">
        <div class="dynamic-graph-input-row">
            <span class="dynamic-graph-label">Median</span>
            <input id="@medianInputElementId" type="number" value="@Model.Median" onchange="updateGraph()" class="dynamic-graph-input">
        </div>
        <div class="dynamic-graph-input-row">
            <span class="dynamic-graph-label">Dispersion</span>
            <input id="@dispersionInputElementId" type="range" value="@Model.Dispersion" min="0" max="1.5" step="0.05" oninput="updateGraph()" class="dynamic-graph-input">
        </div>
        <div class="dynamic-graph-input-row">
            <span class="dynamic-graph-label">Skew</span>
            <input id="@skewInputElementId" type="range" value="@Model.Skew" min="-30" max="30" step="0.5" oninput="updateGraph()" class="dynamic-graph-input">
        </div>
    </div>

    <script>
        var ctx = document.getElementById('@canvasElementId').getContext('2d');

        var medianInput = document.getElementById('@medianInputElementId');
        var dispersionInput = document.getElementById('@dispersionInputElementId');
        var skewInput = document.getElementById('@skewInputElementId');

        var chart;
        
        queryGraphData(function(response) {
 
            chart = new Chart(ctx, {
                type : 'line',
                data : {
                    labels : response.labels,
                    datasets : response.datasets
                },
                options : {
                    legend : {
                        display : false
                    },
                    scales : {
                        yAxes : [{
                            type: 'linear',
                            ticks : {
                                display: true,
                                beginAtZero : true,
                                suggestedMax : response.suggestedMaxY // 100%
                            }
                        }]
                    },
                    spanGaps : true
                }
            });
        })
        
        function updateGraph() {
            // alert('update graph');

            queryGraphData(function(response) {
                chart.data.labels = response.labels;
                chart.data.datasets = response.datasets;
                
                chart.update(0);
            })
        }

        function queryGraphData(onSuccess) {

           axios.get('@Model.AjaxUri.ToString()'
                + '?graphId=@Model.GraphId'
                + '&median=' + medianInput.value
                + '&dispersion=' + dispersionInput.value
                + '&skew=' + skewInput.value

            ).then(function(response) {
                onSuccess(response.data);
            })
        }

    </script>

</div>
