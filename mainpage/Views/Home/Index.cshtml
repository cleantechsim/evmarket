
@using CleanTechSim.MainPage.Models
@model IndexModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="main-container">
    <h1 id="main-title">Cleantech market simulator</h1>

    <p id="main-text">

        The purpose of this page is to visualize in a simple way the trends in the clean tech market and how far one is from
        reaching critical mass.<br/>

        <!--

        NOTE: This is from a layman's perspective, the author is not an economist.<br/>
        
        Simulation bases itself on EVs being a superior product, all else being equal
        (less fuel expenses, more powerful engine, safer, less noise, no pollution).<br/>
        
        Given the above, EV sales rates should as technology advances, mainly be hindered by awareness (until reaches critical mass) and by supply (eg. batteries)
        Otherwise the switch will be like for flipphones to smartphones, everyone chooses the superior alternative.
        -->

    </p>

    <h2 id="main-barriers">Barriers</h2>
    <div id="barrier-graphs">
        <div>
            <div class="graphs-title">Market statistics</div>

            @{ await Html.RenderPartialAsync("_LineGraphStatsPartial", Model.EVAdoption); }
            @{ await Html.RenderPartialAsync("_LineGraphStatsPartial", Model.EVRange); }
            @{ await Html.RenderPartialAsync("_LineGraphStatsPartial", Model.EVChoice); }
            @{ await Html.RenderPartialAsync("_LineGraphStatsPartial", Model.EVSalesPrice); }
        
            <!--
            @{ await Html.RenderPartialAsync("_LineGraphStatsPartial", Model.BatteryCost); }
            @{ await Html.RenderPartialAsync("_LineGraphStatsPartial", Model.EVPerformance); }
            -->
        </div>

        <div>
            <div class="graphs-title">Market forecast</div>
            
            @{ await Html.RenderPartialAsync("_LineGraphComputePartial", Model.MarketForecast); }
        </div>


        <div>
            <div class="graphs-title">Consumer factors</div>

            @{ await Html.RenderPartialAsync("_LineGraphInputPartial", Model.Income); }
            @{ await Html.RenderPartialAsync("_LineGraphInputPartial", Model.RangeRequirement); }
            @{ await Html.RenderPartialAsync("_LineGraphInputPartial", Model.Propensity); }
        </div>

    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function (){

            var incomeGraph           = window['@Model.Income.DOMWindowVariableName()'];
            var rangeRequirementGraph = window['@Model.RangeRequirement.DOMWindowVariableName()'];
            var propensityGraph       = window['@Model.Propensity.DOMWindowVariableName()'];


            var numInited = 0;
            
            var checkForInitied = function() {
                ++ numInited;

                if (numInited == 3) {
                    updateMarketForecast(
                        true,
                        incomeGraph.getGraphSelection(),
                        rangeRequirementGraph.getGraphSelection(),
                        propensityGraph.getGraphSelection());
                }
            }

            incomeGraph.initGraph(checkForInitied);
            rangeRequirementGraph.initGraph(checkForInitied);
            propensityGraph.initGraph(checkForInitied);

            incomeGraph.addGraphUpdateListener(function(selection) {
                    updateMarketForecast(
                        false,
                        selection,
                        rangeRequirementGraph.getGraphSelection(),
                        propensityGraph.getGraphSelection());

            })
        })

        function updateMarketForecast(initial, incomeSelection, rangeRequirementSelection, propensitySelection) {

            var marketForecastGraph = window['@Model.MarketForecast.DOMWindowVariableName()'];

            axios.get('@Model.MarketForecast.AjaxUrl'
                + '?graphId=Model.MarketForecast.AjaxUrl' + this.graphId
                + '&incomeMedian=' + incomeSelection.median
                + '&incomeDispersion=' + incomeSelection.dispersion
                + '&incomeSkew=' + incomeSelection.skew
                + '&percentageOfWageForCarCost=75'

            ).then(function (response) {

                if (initial) {
                    marketForecastGraph.createChart(response.data);                    
                }
                else {
                    marketForecastGraph.updateChartFromResponse(response.data);                                        
                }
            })
        }
    </script>
</div>

